from typing import Optional, List

from flask import Flask as App

from flask_azure_oauth import FlaskAzureOauth
from flask_azure_oauth.tokens import AzureTokenValidator, TestJwt as _TestJwt
from flask_azure_oauth.keys import TestJwk as _TestJwk


class TestJwk(_TestJwk):
    """
    Class to create JSON Web Keys (JWKs) for more extreme testing purposes

    This class builds upon the main TestJwk class, intended for using this extension in other applications, by adding
    methods for testing this extension itself, such as generating JWKs that are intentionally broken.

    By default a unique Key ID is generated for each key, but this can be specified when this should equal another key
    in order to fail token signature validation during tests.
    """

    def __init__(self, *, kid: str = None, null_jwks: bool = False):
        """
        :type kid: str
        :param kid: Key ID
        :type null_jwks: bool
        :param null_jwks: whether an empty JWKS should be returned
        """
        super().__init__()

        if kid is not None:
            self.key_id = kid
        self.null_jwks = null_jwks

    def jwks(self) -> dict:
        """
        Returns the JWK as a Python dictionary, as part of a JSON Web Key Set (JWKS), suitable for encoding with JSON
        for exchange

        Extends the regular TestJwk class to support returning an empty key set for testing

        :rtype dict
        :return: JWK as a JWK Set
        """
        if self.null_jwks:
            return {"keys": []}

        return {"keys": [self.dumps()]}


class TestJwt(_TestJwt):
    """
    Class to create JSON Web Tokens (JWTs) for more extreme testing purposes

    This class builds upon the main TestJwt class, intended for using this extension in other applications, by adding
    methods for testing this extension itself, such as generating JWTs that intentionally omit required elements.

    Supports generating tokens with a configurable header, payload, including scopes, and signing key. Defaults are
    provided for the header and payload to create tokens compatible with a JSON Web Key (signing keys) generated by the
    TestJwk class.
    """

    def __init__(
        self,
        *,
        app: App,
        header: dict = None,
        payload: dict = None,
        roles: list = None,
        scps: list = None,
        signing_key: TestJwk = None,
    ):
        """
        :type app: App
        :type app: Flask application
        :type header: dict
        :param header: header fields to include in token, overrides default values if given
        :type payload: dict
        :param payload: payload claims to include in token, overrides default values if given
        :type roles: list
        :param roles: Optional scopes to include in the token (as a 'roles' claim) for testing authorisation
        :type scps: list
        :param scps: Optional scopes to include in the token (as a 'scp' claim) for testing authorisation
        :type signing_key: TestJwk
        :param signing_key: Optional TestJwk instance for setting the token Key ID, signing algorithm and private key
        for signing
        """
        super().__init__(app=app, roles=roles, scps=scps)

        if signing_key is not None:
            self.signing_key = signing_key
        if header is not None:
            self.header = header
        if payload is not None:
            self.payload = payload


class TestFlaskAzureOauth(FlaskAzureOauth):
    """
    Test specific version of TestFlaskAzureOauth class to allow normally invalid JSON Web Key Set configurations
    """

    def __init__(
        self,
        *,
        azure_tenancy_id: str,
        azure_application_id: str,
        azure_client_application_ids: List[str],
        azure_jwks: Optional[dict] = None,
    ):
        """
        :type azure_tenancy_id: str
        :param azure_tenancy_id: Azure Active Directory tenancy ID
        :type azure_application_id: str
        :param azure_application_id: ID of the Azure Active Directory application registration representing this app
        :type azure_client_application_ids: List[str]
        :param azure_client_application_ids: IDs of Azure Active Directory application registrations representing
        clients of this app
        :type azure_jwks: Optional[dict]
        :param azure_jwks: trusted JWKs formatted as a JSON Web Key Set
        """
        super().__init__()

        self.azure_tenancy_id = azure_tenancy_id
        self.azure_application_id = azure_application_id
        self.azure_client_application_ids = azure_client_application_ids
        self.jwks = azure_jwks

        self.validator = AzureTokenValidator(
            azure_tenancy_id=self.azure_tenancy_id,
            azure_application_id=self.azure_application_id,
            azure_client_application_ids=self.azure_client_application_ids,
            azure_jwks=self.jwks,
        )

        self.register_token_validator(self.validator)

    def use_null_jwks(self) -> None:
        """
        Replaces the token validator with a version where the JSON Web Key Set is empty
        """
        self.deregister_token_validator(self.validator)

        token_validator = AzureTokenValidator(
            azure_tenancy_id=self.azure_tenancy_id,
            azure_application_id=self.azure_application_id,
            azure_client_application_ids=self.azure_client_application_ids,
            azure_jwks=TestJwk(null_jwks=True).jwks(),
        )
        self.register_token_validator(token_validator)

    def use_broken_jwks(self) -> None:
        """
        Replaces the token validator with a version where the JSON Web Key Set contains a broken JWK (missing key type)
        """
        self.deregister_token_validator(self.validator)

        broken_jwks = self.jwks
        del broken_jwks["keys"][0]["kty"]

        token_validator = AzureTokenValidator(
            azure_tenancy_id=self.azure_tenancy_id,
            azure_application_id=self.azure_application_id,
            azure_client_application_ids=self.azure_client_application_ids,
            azure_jwks=broken_jwks,
        )
        self.register_token_validator(token_validator)

    def use_replaced_jwks(self) -> None:
        """
        Replaces the token validator with a version where the JSON Web Key Set has been replaced but uses the same KID
        """
        self.deregister_token_validator(self.validator)

        previous_kid = self.jwks["keys"][0]["kid"]

        token_validator = AzureTokenValidator(
            azure_tenancy_id=self.azure_tenancy_id,
            azure_application_id=self.azure_application_id,
            azure_client_application_ids=self.azure_client_application_ids,
            azure_jwks=TestJwk(kid=previous_kid).jwks(),
        )
        self.register_token_validator(token_validator)

    def use_restored_jwks(self) -> None:
        """
        Replaces the token validator with a version where the JSON Web Key Set is unaltered and working
        """
        self.deregister_token_validator(self.validator)

        token_validator = AzureTokenValidator(
            azure_tenancy_id=self.azure_tenancy_id,
            azure_application_id=self.azure_application_id,
            azure_client_application_ids=self.azure_client_application_ids,
            azure_jwks=self.jwks,
        )
        self.register_token_validator(token_validator)
